name: Diff-Based Coverage Check

on:
  pull_request:
    types: [labeled]

jobs:
  coverage-check:
    name: Check Coverage on New Lines
    if: github.base_ref == 'main' && github.event.label.name == 'run-diff-coverage-tests'
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      contents: write

    env:
      SHOPIFY_FIXED_ARGS: ${{ secrets.SHOPIFY_FIXED_ARGS }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required to compare with main

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[milvus,shopify,hubspot]' --quiet
          pip install diff-cover coverage

      - name: Run tests with coverage
        run: |
          coverage run -m pytest tests/
          coverage xml
          coverage report > coverage.txt

      - name: Fetch main branch
        run: git fetch origin main

      - name: Generate diff coverage report and check coverage
        id: coverage_check
        run: |
          # Generate both console output and HTML report in one command
          diff-cover coverage.xml --compare-branch=origin/main --html-report diff_coverage.html --fail-under=100 > diff_output.txt 2>&1 || true
          
          # Extract diff coverage percentage
          DIFF_COVERAGE=$(grep -oE 'Diff coverage.*[0-9]+\.*[0-9]*%' diff_output.txt | grep -oE '[0-9]+\.*[0-9]*' || echo "0")
          echo "Diff coverage: $DIFF_COVERAGE%"
          echo "diff_coverage=$DIFF_COVERAGE" >> $GITHUB_OUTPUT
          
          # Check if coverage is below 100%
          if (( $(echo "$DIFF_COVERAGE < 100" | bc -l) )); then
            echo "coverage_low=true" >> $GITHUB_OUTPUT
            echo "⚠️ Diff coverage is $DIFF_COVERAGE%, which is below the required 100%."
          else
            echo "coverage_low=false" >> $GITHUB_OUTPUT
            echo "✅ Diff coverage is $DIFF_COVERAGE%, which meets the requirement."
          fi

      - name: Post comment on PR if coverage is low
        if: steps.coverage_check.outputs.coverage_low == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ⚠️ **Diff coverage is ${{ steps.coverage_check.outputs.diff_coverage }}%**, which is below the required 100%.

            Please add or update tests to cover newly added or changed lines.

      - name: Upload diff coverage report
        uses: actions/upload-artifact@v4
        with:
          name: diff-coverage-report
          path: diff_coverage.html

      - name: Update README badge
        if: always()  # Run even if previous steps failed
        run: |
          if [ -f coverage.txt ]; then
            TOTAL_COVERAGE=$(grep -E 'TOTAL' coverage.txt | awk '{print $4}' | tr -d '%')
            echo "Total coverage: $TOTAL_COVERAGE%"

            # Determine badge color based on coverage
            if (( $(echo "$TOTAL_COVERAGE < 90" | bc -l) )); then
              COLOR="red"
            elif (( $(echo "$TOTAL_COVERAGE < 99" | bc -l) )); then
              COLOR="orange"
            else
              COLOR="green"
            fi

            # Check if README needs updating
            CURRENT_BADGE=$(grep -oE 'coverage-[0-9]+\.[0-9]*%25-[a-z]*' README.md || echo "")
            NEW_BADGE="coverage-${TOTAL_COVERAGE}%25-${COLOR}"
            
            if [ "$CURRENT_BADGE" != "$NEW_BADGE" ]; then
              echo "Updating README badge from $CURRENT_BADGE to $NEW_BADGE"
              sed -i "s/coverage-[0-9]\+\.[0-9]*%25-[a-z]*/coverage-${TOTAL_COVERAGE}%25-${COLOR}/g" README.md
              
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"
              git add README.md
              git commit -m "chore: update README with ${TOTAL_COVERAGE}% test coverage"
              git push
            else
              echo "README badge already up to date with ${TOTAL_COVERAGE}% coverage"
            fi
          else
            echo "coverage.txt not found, skipping README update"
          fi
