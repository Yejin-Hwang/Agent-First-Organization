name: Coverage Regression Check

on:
  pull_request:
    types: [labeled]

jobs:
  check-regression:
    name: Detect Coverage Regression by File
    if: github.base_ref == 'main' && github.event.label.name == 'run-coverage-regression-test'

    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      contents: write

    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      SHOPIFY_FIXED_ARGS: ${{ secrets.SHOPIFY_FIXED_ARGS }}

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[milvus,shopify,hubspot]' --quiet
          pip install diff-cover coverage

      - name: Run tests with coverage
        run: |
          coverage run -m pytest tests/
          coverage xml
          coverage report

      - name: Compare coverage with base branch
        run: |
          # Always check for Python file changes for regression testing
          if git diff --name-only origin/main | grep -q '\.py$'; then
            echo "Python files changed, checking coverage regression..."
            # diff-cover will return non-zero exit if any new lines lack coverage
            diff-cover coverage.xml --compare-branch origin/main --fail-under=100
          else
            echo "No Python files changed in this PR. Coverage regression check not needed."
            echo "‚úÖ No coverage regression check needed - no Python files modified"
          fi

      - name: Show current coverage status
        run: |
          echo "üìä Current Coverage Status:"
          if [ -f "coverage.xml" ]; then
            # Extract and display overall coverage percentage
            COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); coverage = float(tree.getroot().attrib['line-rate']) * 100; print(f'{coverage:.1f}')")
            echo "‚úÖ Overall coverage: ${COVERAGE}%"
          else
            echo "‚ùå No coverage data available"
          fi

      - name: Upload detailed diff report
        if: failure()
        run: |
          # Only generate diff report if there are Python files to compare
          if git diff --name-only origin/main | grep -q '\.py$'; then
            diff-cover coverage.xml --compare-branch origin/main --html-report diff_coverage.html || true
          else
            echo "No Python files changed, skipping diff report generation"
          fi

      - name: Upload HTML diff coverage report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: diff-coverage-report
          path: diff_coverage.html
        continue-on-error: true

      - name: Check for coverage data
        id: coverage_check
        run: |
          if [ -f "coverage.xml" ]; then
            echo "COVERAGE_EXISTS=true" >> $GITHUB_ENV
            echo "‚úÖ Coverage XML file found"
          else
            echo "COVERAGE_EXISTS=false" >> $GITHUB_ENV
            echo "‚ùå No coverage.xml file found"
          fi

      - name: Combine coverage data
        if: env.COVERAGE_EXISTS == 'true'
        run: |
          # Combine any existing coverage data files
          coverage combine || true
          echo "‚úÖ Coverage data combined"

      - name: Display coverage
        if: env.COVERAGE_EXISTS == 'true'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
          MINIMUM_GREEN: 99.1
          MINIMUM_ORANGE: 70
        continue-on-error: true

      - name: Generate coverage report
        if: env.COVERAGE_EXISTS == 'true'
        run: |
          # Generate HTML coverage report for better visibility
          coverage html
          echo "‚úÖ HTML coverage report generated"

      - name: Upload HTML coverage report
        if: env.COVERAGE_EXISTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
        continue-on-error: true

      - name: Update README with latest coverage
        run: |
          # Check if coverage.xml exists and has data
          if [ -f "coverage.xml" ]; then
            # Extract overall coverage percentage from XML
            COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); coverage = float(tree.getroot().attrib['line-rate']) * 100; print(f'{coverage:.1f}')")

            echo "Extracted coverage: $COVERAGE%"

            # Determine badge color based on coverage percentage
            if (( $(echo "$COVERAGE < 90" | bc -l) )); then
              COLOR="red"
            elif (( $(echo "$COVERAGE < 99" | bc -l) )); then
              COLOR="orange"
            else
              COLOR="green"
            fi

            echo "Setting badge color to: $COLOR"

            # Update README badge with color coding
            # This assumes a badge format like: ![Coverage](https://img.shields.io/badge/coverage-XX.X%25-COLOR)
            sed -i "s/coverage-[0-9]\+\.[0-9]%25-[a-z]*/coverage-${COVERAGE}%25-${COLOR}/g" README.md

            # Commit and push if README changed
            if git diff --quiet; then
              echo "No README change needed."
            else
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"
              git add README.md
              git commit -m "chore: update README with ${COVERAGE}% test coverage (${COLOR} badge)"
              git push
            fi
          else
            echo "No coverage.xml file found. Skipping README update."
          fi
