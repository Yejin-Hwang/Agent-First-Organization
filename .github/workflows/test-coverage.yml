name: Test Coverage Check

on:
  pull_request:
    types: [labeled]

jobs:
  test:
    name: Run tests and display coverage
    if: github.base_ref == 'main' && github.event.label.name == 'run-coverage-tests'
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      contents: write

    env:
      SHOPIFY_FIXED_ARGS: ${{ secrets.SHOPIFY_FIXED_ARGS }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      MIN_COVERAGE_THRESHOLD: '99.1'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[milvus,shopify,hubspot]' --quiet

      - name: Run tests and collect coverage
        id: coverage
        run: |
          # Run tests with coverage
          coverage run -m pytest tests/
          
          # Generate coverage reports
          coverage xml
          coverage html
          coverage report
          
          # Extract coverage percentage
          if [ -f "coverage.xml" ]; then
            COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); print(f'{float(tree.getroot().attrib[\"line-rate\"]) * 100:.1f}')")
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "✅ Coverage: ${COVERAGE}%"
            
            # Check against threshold
            MIN_COVERAGE=${{ env.MIN_COVERAGE_THRESHOLD }}
            if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
              echo "❌ Coverage (${COVERAGE}%) is below threshold (${MIN_COVERAGE}%)"
              exit 1
            else
              echo "✅ Coverage (${COVERAGE}%) meets threshold (${MIN_COVERAGE}%)"
            fi
          else
            echo "❌ No coverage data collected"
            exit 1
          fi

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/
        continue-on-error: true

      - name: Display coverage in PR
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
          MINIMUM_GREEN: 99.1
          MINIMUM_ORANGE: 70
        continue-on-error: true

      - name: Update README badge
        run: |
          if [ -f "coverage.xml" ]; then
            COVERAGE=${{ steps.coverage.outputs.coverage }}
            
            # Determine badge color
            if (( $(echo "$COVERAGE < 90" | bc -l) )); then
              COLOR="red"
            elif (( $(echo "$COVERAGE < 99" | bc -l) )); then
              COLOR="orange"
            else
              COLOR="green"
            fi
            
            # Update README badge
            sed -i "s/coverage-[0-9]\+\.[0-9]%25-[a-z]*/coverage-${COVERAGE}%25-${COLOR}/g" README.md
            
            # Commit if changed
            if ! git diff --quiet; then
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"
              git add README.md
              git commit -m "chore: update README with ${COVERAGE}% test coverage"
              git push
            fi
          fi
  