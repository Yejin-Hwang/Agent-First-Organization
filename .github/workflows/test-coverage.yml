name: Test Coverage Check

on:
  pull_request:
    types: [labeled]

jobs:
  test:
    name: run tests and display coverage

    if: github.base_ref == 'main' && github.event.label.name == 'run-coverage-tests'

    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      contents: write

    env:
      SHOPIFY_FIXED_ARGS: ${{ secrets.SHOPIFY_FIXED_ARGS }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[milvus,shopify,hubspot]' --quiet

      - name: Run tests and check coverage threshold
        run: |
          # Run tests with coverage and generate all reports
          pytest tests/ --cov=arklex --cov-report=term-missing --cov-report=html --cov-report=xml --no-cov-on-fail
          
          # Enforce absolute uncovered lines threshold
          python -c "
            import xml.etree.ElementTree as ET

            UNCOVERED_LINES_THRESHOLD = 52  # Set your maximum allowed uncovered lines

            try:
                tree = ET.parse("coverage.xml")
                root = tree.getroot()

                total_lines = int(root.attrib["lines-valid"])
                covered_lines = int(root.attrib["lines-covered"])
                uncovered_lines = total_lines - covered_lines

                print(f"Total lines: {total_lines}")
                print(f"Covered lines: {covered_lines}")
                print(f"Uncovered lines: {uncovered_lines}")
                print(f"Maximum allowed uncovered lines: {UNCOVERED_LINES_THRESHOLD}")

                if uncovered_lines >= UNCOVERED_LINES_THRESHOLD:
                    print(f"❌ Uncovered lines ({uncovered_lines}) exceed threshold ({UNCOVERED_LINES_THRESHOLD})")
                    exit(1)
                else:
                    print(f"✅ Uncovered lines ({uncovered_lines}) within acceptable limit")
            except Exception as e:
                print(f"Error parsing coverage.xml: {e}")
                exit(1)"

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov
          path: htmlcov/

      - name: Display coverage
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
          MINIMUM_GREEN: 99.1
          MINIMUM_ORANGE: 70
