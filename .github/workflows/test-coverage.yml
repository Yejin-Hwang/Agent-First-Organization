name: Test Coverage Check

on:
  pull_request:
    types: [labeled]

permissions:
  contents: write
  pull-requests: write

jobs:
  setup:
    name: Setup Environment
    if: |
      (github.event_name == 'pull_request' && github.event.label.name == 'run-coverage-tests') ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) ||
      (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      MIN_COVERAGE_THRESHOLD: '99.1'
      ARKLEX_TEST_ENV: 'local'
    outputs:
      coverage-percentage: ${{ steps.extract-coverage.outputs.coverage }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
          token: ${{ github.token }}

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[milvus,shopify,hubspot]' --quiet
          pip install coverage pytest-cov

      - name: Run tests and check coverage threshold
        id: coverage-check
        uses: ./.github/actions/run-coverage-tests
        with:
          coverage-command: 'pytest tests/ --cov=arklex --cov-report=term-missing --cov-report=html --cov-report=xml --no-cov-on-fail'
          min-coverage-threshold: '99.1'
          checkout-repo: 'false'

      - name: Verify coverage files
        run: |
          echo "Checking for coverage files..."
          ls -la
          if [ -f "coverage.xml" ]; then
            echo "✅ coverage.xml found"
            echo "coverage.xml content (first 10 lines):"
            head -10 coverage.xml
          else
            echo "❌ coverage.xml not found"
            echo "Available files:"
            ls -la
            exit 1
          fi

      - name: Extract coverage percentage
        id: extract-coverage
        run: |
          python -c "
          import xml.etree.ElementTree as ET
          import os
          
          try:
              if not os.path.exists('coverage.xml'):
                  print('❌ coverage.xml not found')
                  print('Available files:')
                  import subprocess
                  result = subprocess.run(['ls', '-la'], capture_output=True, text=True)
                  print(result.stdout)
                  exit(1)
                  
              tree = ET.parse('coverage.xml')
              root = tree.getroot()
              
              # Use line-rate for coverage calculation
              coverage = None
              if 'line-rate' in root.attrib:
                  coverage = float(root.attrib['line-rate']) * 100
              else:
                  # Search for any element with line-rate
                  for elem in root.iter():
                      if 'line-rate' in elem.attrib:
                          coverage = float(elem.attrib['line-rate']) * 100
                          break
                  else:
                      print('❌ Could not find line-rate coverage data in coverage.xml')
                      print('XML root attributes:', root.attrib)
                      exit(1)
                      
              if coverage is None:
                  print('❌ Coverage is None')
                  exit(1)
              
              print(f'Coverage: {coverage:.1f}%')
              
              # Check against minimum threshold
              min_coverage = float(os.environ.get('MIN_COVERAGE_THRESHOLD', '99.1'))
              if coverage < min_coverage:
                  print(f'❌ Coverage {coverage:.1f}% is below minimum threshold {min_coverage}%')
                  exit(1)
              else:
                  print(f'✅ Coverage {coverage:.1f}% meets minimum threshold {min_coverage}%')
              
              with open(os.environ.get('GITHUB_OUTPUT', '/dev/null'), 'a') as f:
                  f.write(f'coverage={coverage:.1f}\\n')
          except Exception as e:
              print(f'❌ Error parsing coverage.xml: {e}')
              import traceback
              traceback.print_exc()
              exit(1)"

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
          retention-days: 30

      - name: Upload HTML coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov
          path: htmlcov/
          retention-days: 30

  display-coverage:
    name: Display Coverage Comment
    needs: setup
    if: |
      (github.event_name == 'pull_request' && github.event.label.name == 'run-coverage-tests') ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) ||
      (github.event_name == 'workflow_dispatch')
    uses: ./.github/workflows/reusable-display-coverage-comment.yml
    with:
      minimum-green: '99.1'
      minimum-orange: '70'
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  update-badge:
    name: Update README Badge
    needs: setup
    if: |
      (github.event_name == 'pull_request' && github.event.label.name == 'run-coverage-tests') ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) ||
      (github.event_name == 'workflow_dispatch')
    uses: ./.github/workflows/reusable-update-badge.yml
    with:
      coverage-file: 'coverage.xml'
      coverage-format: 'xml'
      min-coverage-threshold: '99.1'
    permissions:
      contents: write
      pull-requests: write
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}
