name: Test Coverage Check

on:
  pull_request:
    types: [labeled]

jobs:
  test:
    name: run tests and display coverage

    if: github.base_ref == 'main' && github.event.label.name == 'run-coverage-tests'

    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      contents: write

    env:
      SHOPIFY_FIXED_ARGS: ${{ secrets.SHOPIFY_FIXED_ARGS }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      MIN_COVERAGE_THRESHOLD: '99.1'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[milvus,shopify,hubspot]' --quiet

      - name: Run tests and check coverage threshold
        run: |
          # Run tests with coverage and generate all reports
          pytest tests/ --cov=arklex --cov-report=term-missing --cov-report=html --cov-report=xml --no-cov-on-fail
          
          # Check if coverage.xml exists and has data
          if [ -f "coverage.xml" ]; then
            # Extract coverage percentage from the XML report
            python -c |
              import xml.etree.ElementTree as ET
              import os
              
              try:
                  tree = ET.parse('coverage.xml')
                  root = tree.getroot()
                  coverage = float(root.attrib['line-rate']) * 100
                  print(f'Coverage: {coverage:.1f}%')
                  
                  # Get minimum coverage threshold from environment variable
                  min_coverage = float(os.environ.get('MIN_COVERAGE_THRESHOLD', '99.1'))
                  print(f'Minimum coverage threshold: {min_coverage}%')
                  
                  if coverage < min_coverage:
                      print(f'❌ Coverage ({coverage:.1f}%) is below minimum threshold ({min_coverage}%)')
                      print('This PR will be blocked until coverage is improved.')
                      exit(1)
                  else:
                      print(f'✅ Coverage ({coverage:.1f}%) meets minimum threshold ({min_coverage}%)')
              except Exception as e:
                  print(f'Error reading coverage data: {e}')
                  print('❌ Could not determine coverage. Please check the test output.')
                  exit(1)
          else
            echo "No coverage.xml file found. This might happen if no tests were run or no code was executed."
            echo "✅ Skipping coverage threshold check - no coverage data available"
          fi

      - name: Upload coverage report
        if: hashFiles('coverage.xml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
        continue-on-error: true

      - name: Upload HTML coverage report
        if: hashFiles('htmlcov/') != ''
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov
          path: htmlcov/
        continue-on-error: true

      - name: Display coverage
        if: success() || failure()
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
          MINIMUM_GREEN: 99.1
          MINIMUM_ORANGE: 70
        continue-on-error: true

      - name: Update README with latest coverage
        run: |
          # Check if coverage.xml exists and has data
          if [ -f "coverage.xml" ]; then
            # Extract overall coverage percentage from XML
            COVERAGE=$(python -c |
              import xml.etree.ElementTree as ET
              tree = ET.parse('coverage.xml')
              coverage = float(tree.getroot().attrib['line-rate']) * 100
              print(f'{coverage:.1f}')
            )

            echo "Extracted coverage: $COVERAGE%"

            # Determine badge color based on coverage percentage
            if (( $(echo "$COVERAGE < 90" | bc -l) )); then
              COLOR="red"
            elif (( $(echo "$COVERAGE < 99" | bc -l) )); then
              COLOR="orange"
            else
              COLOR="green"
            fi

            echo "Setting badge color to: $COLOR"

            # Update README badge with color coding
            # This assumes a badge format like: ![Coverage](https://img.shields.io/badge/coverage-XX.X%25-COLOR)
            sed -i "s/coverage-[0-9]\+\.[0-9]%25-[a-z]*/coverage-${COVERAGE}%25-${COLOR}/g" README.md

            # Commit and push if README changed
            if git diff --quiet; then
              echo "No README change needed."
            else
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"
              git add README.md
              git commit -m "chore: update README with ${COVERAGE}% test coverage (${COLOR} badge)"
              git push
            fi
          else
            echo "No coverage.xml file found. Skipping README update."
          fi
  