name: Test Coverage Check

on:
  pull_request:
    types: [opened, synchronize, labeled, unlabeled]
  push:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  setup:
    name: Setup Environment
    if: |
      (github.event_name == 'pull_request' && github.event.label.name == 'run-coverage-tests') ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) ||
      (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      MIN_COVERAGE_THRESHOLD: '99.1'
      ARKLEX_TEST_ENV: 'local'
    outputs:
      coverage-percentage: ${{ steps.coverage-check.outputs.coverage }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
          token: ${{ github.token }}

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[milvus,shopify,hubspot]' --quiet
          pip install coverage pytest-cov

      - name: Run tests and check coverage threshold
        id: coverage-check
        uses: ./.github/actions/run-coverage-tests
        with:
          coverage-command: 'pytest tests/ --cov=arklex --cov-report=term-missing --cov-report=html --cov-report=xml --no-cov-on-fail'
          min-coverage-threshold: '99.1'
          checkout-repo: 'false'

      - name: Debug coverage generation
        run: |
          echo "Checking coverage files after test run..."
          ls -la
          echo ""
          echo "Checking .coverage file if it exists:"
          if [ -f ".coverage" ]; then
            echo "✅ .coverage file exists"
            echo "File size: $(wc -c < .coverage) bytes"
          else
            echo "❌ .coverage file not found"
          fi
          echo ""
          echo "Checking coverage.xml file if it exists:"
          if [ -f "coverage.xml" ]; then
            echo "✅ coverage.xml file exists"
            echo "File size: $(wc -c < coverage.xml) bytes"
            echo "First 20 lines:"
            head -20 coverage.xml
          else
            echo "❌ coverage.xml file not found"
          fi

      - name: Verify coverage files exist
        run: |
          echo "Checking for coverage files..."
          ls -la
          if [ -f "coverage.xml" ]; then
            echo "✅ coverage.xml found"
            echo "coverage.xml content (first 10 lines):"
            head -10 coverage.xml
            echo ""
            echo "coverage.xml content (last 10 lines):"
            tail -10 coverage.xml
            echo ""
            echo "Checking XML structure..."
            python -c "
          import xml.etree.ElementTree as ET
          import os
          
          try:
              tree = ET.parse('coverage.xml')
              root = tree.getroot()
              print(f'Root tag: {root.tag}')
              print(f'Root attributes: {root.attrib}')
              
              # Look for coverage elements
              for elem in root.iter():
                  if 'line-rate' in elem.attrib:
                      print(f'Found element with line-rate: {elem.tag} - {elem.attrib}')
              print('XML parsing successful')
          except Exception as e:
              print(f'Error parsing XML: {e}')
              import traceback
              traceback.print_exc()
          "
          else
            echo "❌ coverage.xml not found"
            echo "Available files:"
            ls -la
            echo "Checking for other coverage files..."
            if [ -f ".coverage" ]; then
              echo "✅ .coverage found, generating XML"
              coverage xml
              if [ -f "coverage.xml" ]; then
                echo "✅ coverage.xml generated successfully"
              else
                echo "❌ Failed to generate coverage.xml"
                exit 1
              fi
            else
              echo "❌ No coverage data found"
              exit 1
            fi
          fi

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
          retention-days: 30

      - name: Upload HTML coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov
          path: htmlcov/
          retention-days: 30

  display-coverage:
    name: Display Coverage Comment
    needs: setup
    if: |
      (github.event_name == 'pull_request' && github.event.label.name == 'run-coverage-tests') ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) ||
      (github.event_name == 'workflow_dispatch')
    uses: ./.github/workflows/reusable-display-coverage-comment.yml
    with:
      minimum-green: '99.1'
      minimum-orange: '70'
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  update-badge:
    name: Update README Badge
    needs: setup
    if: |
      (github.event_name == 'pull_request' && github.event.label.name == 'run-coverage-tests') ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) ||
      (github.event_name == 'workflow_dispatch')
    uses: ./.github/workflows/reusable-update-badge.yml
    with:
      coverage-file: 'coverage.xml'
      coverage-format: 'xml'
      min-coverage-threshold: '99.1'
    permissions:
      contents: write
      pull-requests: write
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}
