name: 'Run Tests and Check Coverage'
description: 'Run tests with coverage and check against minimum threshold'

inputs:
  coverage-command:
    description: 'Command to run tests with coverage'
    required: false
    default: 'pytest tests/ --cov=arklex --cov-report=term-missing --cov-report=html --cov-report=xml --no-cov-on-fail'
  min-coverage-threshold:
    description: 'Minimum coverage percentage to pass'
    required: false
    default: '99.1'
  checkout-repo:
    description: 'Whether to checkout the repository (set to false if already checked out)'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      if: inputs.checkout-repo == 'true'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      if: inputs.checkout-repo == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      if: inputs.checkout-repo == 'true'
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -e '.[milvus,shopify,hubspot]' --quiet

    - name: Run tests and check coverage threshold
      id: coverage-check
      shell: bash
      env:
        MIN_COVERAGE_THRESHOLD: ${{ inputs.min-coverage-threshold }}
        ARKLEX_TEST_ENV: 'local'
      run: |
        echo "Running coverage command: ${{ inputs.coverage-command }}"
        ${{ inputs.coverage-command }}

        # Check if coverage.xml exists, if not try to generate it
        if [ ! -f "coverage.xml" ] && [ -f ".coverage" ]; then
          echo "coverage.xml not found, generating from .coverage..."
          coverage xml
        fi

        python -c "
        import xml.etree.ElementTree as ET
        import os
        import sys

        try:
            if not os.path.exists('coverage.xml'):
                print('❌ coverage.xml not found')
                print('Available files:')
                import subprocess
                result = subprocess.run(['ls', '-la'], capture_output=True, text=True)
                print(result.stdout)
                sys.exit(1)
                
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            
            # Debug: Print root attributes
            print(f'Root tag: {root.tag}')
            print(f'Root attributes: {root.attrib}')
            
            # Try different attribute names for coverage
            coverage = None
            if 'line-rate' in root.attrib:
                coverage = float(root.attrib['line-rate']) * 100
                print(f'Found line-rate: {root.attrib["line-rate"]}')
            elif 'lines-valid' in root.attrib and 'lines-covered' in root.attrib:
                lines_valid = int(root.attrib['lines-valid'])
                lines_covered = int(root.attrib['lines-covered'])
                coverage = (lines_covered / lines_valid) * 100 if lines_valid > 0 else 0
                print(f'Calculated from lines-valid: {lines_valid}, lines-covered: {lines_covered}')
            else:
                # Search for any element with line-rate
                for elem in root.iter():
                    if 'line-rate' in elem.attrib:
                        coverage = float(elem.attrib['line-rate']) * 100
                        print(f'Found line-rate in {elem.tag}: {elem.attrib["line-rate"]}')
                        break
                else:
                    print('❌ No coverage attributes found in XML')
                    print('Available attributes:', root.attrib)
                    print('Searching all elements for line-rate...')
                    for elem in root.iter():
                        if elem.attrib:
                            print(f'  {elem.tag}: {elem.attrib}')
                    sys.exit(1)
                
            if coverage is None:
                print('❌ Failed to extract coverage percentage')
                sys.exit(1)
                
            print(f'Coverage: {coverage:.1f}%')

            min_coverage = float(os.environ.get('MIN_COVERAGE_THRESHOLD', '${{ inputs.min-coverage-threshold }}'))
            print(f'Minimum coverage threshold: {min_coverage}%')

            if coverage < min_coverage:
                print(f'❌ Coverage ({coverage:.1f}%) is below minimum threshold ({min_coverage}%)')
                sys.exit(1)
            else:
                print(f'✅ Coverage ({coverage:.1f}%) meets minimum threshold ({min_coverage}%)')

            with open(os.environ.get('GITHUB_OUTPUT', '/dev/null'), 'a') as f:
                f.write(f'coverage={coverage:.1f}\\n')
        except Exception as e:
            print(f'Error reading coverage data: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)"
